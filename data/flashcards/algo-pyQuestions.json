[
  
 {
    "title": "Reverse a String",
    "question": "Write a function to reverse a string.",
    "solution": "Python",
    "answer": "def reverse_string(s: str) -> str:\n    # Reverse the string using slicing\n    return s[::-1]"
  },
  {
    "title": "Check for Palindrome",
    "question": "Write a function to check if a string is a palindrome.",
    "solution": "Python",
    "answer": "def is_palindrome(s: str) -> bool:\n    # Check if the string is equal to its reverse\n    return s == s[::-1]"
  },
  {
    "title": "Find the Maximum Element in an Array",
    "question": "Write a function to find the maximum element in an array.",
    "solution": "Python",
    "answer": "def find_max(arr: list) -> int:\n    # Use the max function to find the maximum element\n    return max(arr)"
  },
  {
    "title": "Two Sum",
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "solution": "Python",
    "answer": "def two_sum(nums: list, target: int) -> list:\n    # Create a dictionary to store the difference and its index\n    num_dict = {}\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in num_dict:\n            return [num_dict[diff], i]\n        num_dict[num] = i"
  },
  {
    "title": "Merge Two Sorted Lists",
    "question": "Merge two sorted linked lists and return it as a sorted list.",
    "solution": "Python",
    "answer": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef merge_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode:\n    # Create a dummy node to hold the result\n    dummy = ListNode()\n    current = dummy\n    # Merge the lists while both are non-empty\n    while l1 and l2:\n        if l1.val < l2.val:\n            current.next, l1 = l1, l1.next\n        else:\n            current.next, l2 = l2, l2.next\n        current = current.next\n    # Attach the remaining elements\n    current.next = l1 or l2\n    return dummy.next"
  }
,
  {
    "title": "Find the Middle Element of a Linked List",
    "question": "Write a function to find the middle element of a linked list.",
    "solution": "Python",
    "answer": "def find_middle(head: ListNode) -> ListNode:\n    # Initialize two pointers\n    slow = fast = head\n    # Move fast pointer twice as fast as slow pointer\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    # Slow pointer will be at the middle\n    return slow"
  },
  {
    "title": "Remove Duplicates from Sorted Array",
    "question": "Write a function to remove duplicates from a sorted array.",
    "solution": "Python",
    "answer": "def remove_duplicates(nums: list) -> int:\n    # Initialize a pointer for unique elements\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i + 1"
  },
  {
    "title": "Rotate Array",
    "question": "Write a function to rotate an array to the right by k steps.",
    "solution": "Python",
    "answer": "def rotate_array(nums: list, k: int) -> None:\n    # Find the effective rotation steps\n    k %= len(nums)\n    # Reverse the entire array, then reverse the two sub-arrays\n    nums.reverse()\n    nums[:k] = reversed(nums[:k])\n    nums[k:] = reversed(nums[k:])"
  },
  {
    "title": "Implement Stack using Queues",
    "question": "Implement a stack using only instances of a queue.",
    "solution": "Python",
    "answer": "from collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.q = deque()\n    def push(self, x: int) -> None:\n        self.q.append(x)\n        for _ in range(len(self.q) - 1):\n            self.q.append(self.q.popleft())\n    def pop(self) -> int:\n        return self.q.popleft()\n    def top(self) -> int:\n        return self.q[0]\n    def empty(self) -> bool:\n        return not self.q"
  },
  {
    "title": "Implement Queue using Stacks",
    "question": "Implement a queue using only instances of a stack.",
    "solution": "Python",
    "answer": "class Queue:\n    def __init__(self):\n        self.s1 = []\n        self.s2 = []\n    def enqueue(self, x: int) -> None:\n        self.s1.append(x)\n    def dequeue(self) -> int:\n        if not self.s2:\n            while self.s1:\n                self.s2.append(self.s1.pop())\n        return self.s2.pop()\n    def empty(self) -> bool:\n        return not self.s1 and not self.s2"
  }
,
  {
    "title": "Find the Intersection Point of Two Linked Lists",
    "question": "Write a function to find the node where two singly linked lists intersect.",
    "solution": "Python",
    "answer": "def get_intersection_node(headA: ListNode, headB: ListNode) -> ListNode:\n    # Initialize pointers for both lists\n    ptrA, ptrB = headA, headB\n    # Traverse both lists until they intersect\n    while ptrA != ptrB:\n        ptrA = ptrA.next if ptrA else headB\n        ptrB = ptrB.next if ptrB else headA\n    return ptrA"
  },
  {
    "title": "Implement a Min Stack",
    "question": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
    "solution": "Python",
    "answer": "class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if not self.min_stack or x <= self.min_stack[-1]:\n            self.min_stack.append(x)\n    def pop(self) -> None:\n        if self.stack.pop() == self.min_stack[-1]:\n            self.min_stack.pop()\n    def top(self) -> int:\n        return self.stack[-1]\n    def getMin(self) -> int:\n        return self.min_stack[-1]"
  },
  {
    "title": "Check if a Binary Tree is Balanced",
    "question": "Write a function to check if a binary tree is height-balanced.",
    "solution": "Python",
    "answer": "def is_balanced(root: TreeNode) -> bool:\n    def height(node):\n        if not node:\n            return 0\n        left, right = height(node.left), height(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return 1 + max(left, right)\n    return height(root) != -1"
  },
  {
    "title": "Find the First Unique Character in a String",
    "question": "Write a function to find the first non-repeating character in a string and return its index.",
    "solution": "Python",
    "answer": "from collections import Counter\ndef first_uniq_char(s: str) -> int:\n    # Count the occurrences of each character\n    count = Counter(s)\n    # Find the first unique character\n    for i, c in enumerate(s):\n        if count[c] == 1:\n            return i\n    return -1"
  },
  {
    "title": "Implement Trie (Prefix Tree)",
    "question": "Implement a trie data structure that supports insert, search, and startsWith methods.",
    "solution": "Python",
    "answer": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word: str) -> None:\n        node = self.root\n        for ch in word:\n            if ch not in node.children:\n                node.children[ch] = TrieNode()\n            node = node.children[ch]\n        node.is_end_of_word = True\n    def search(self, word: str) -> bool:\n        node = self.root\n        for ch in word:\n            if ch not in node.children:\n                return False\n            node = node.children[ch]\n        return node.is_end_of_word\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for ch in prefix:\n            if ch not in node.children:\n                return False\n            node = node.children[ch]\n        return True"
  }
,
  {
    "title": "Find All Duplicates in an Array",
    "question": "Write a function to find all the elements that appear twice in an array.",
    "solution": "Python",
    "answer": "def find_duplicates(nums: list) -> list:\n    # Initialize an empty list to store duplicates\n    duplicates = []\n    # Iterate through the array\n    for num in nums:\n        # Use the absolute value as an index\n        index = abs(num) - 1\n        # Negate the value at this index to mark it as visited\n        if nums[index] > 0:\n            nums[index] = -nums[index]\n        else:\n            duplicates.append(index + 1)\n    return duplicates"
  },
  {
    "title": "Maximum Subarray",
    "question": "Write a function to find the contiguous subarray with the largest sum.",
    "solution": "Python",
    "answer": "def max_sub_array(nums: list) -> int:\n    # Initialize variables to store the current and maximum sums\n    curr_sum = max_sum = nums[0]\n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # Update the current sum, considering the current element\n        curr_sum = max(num, curr_sum + num)\n        # Update the maximum sum\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
  },
  {
    "title": "Climbing Stairs",
    "question": "Write a function to find the number of distinct ways to climb a staircase with n steps, taking 1 or 2 steps at a time.",
    "solution": "Python",
    "answer": "def climb_stairs(n: int) -> int:\n    # Initialize the base cases\n    a, b = 1, 1\n    # Compute the number of ways for each step\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "question": "Write a function to find the maximum profit you can achieve from one transaction: buying and selling one stock.",
    "solution": "Python",
    "answer": "def max_profit(prices: list) -> int:\n    # Initialize variables to store the minimum price and maximum profit\n    min_price, max_profit = float('inf'), 0\n    # Iterate through the array\n    for price in prices:\n        # Update the minimum price\n        min_price = min(min_price, price)\n        # Update the maximum profit\n        max_profit = max(max_profit, price - min_price)\n    return max_profit"
  },
  {
    "title": "Validate Binary Search Tree",
    "question": "Write a function to validate if a binary tree is a binary search tree.",
    "solution": "Python",
    "answer": "def is_valid_bst(root: TreeNode) -> bool:\n    # Helper function to validate the tree\n    def helper(node, lower=float('-inf'), upper=float('inf')):\n        if not node:\n            return True\n        val = node.val\n        if val <= lower or val >= upper:\n            return False\n        if not helper(node.right, val, upper):\n            return False\n        if not helper(node.left, lower, val):\n            return False\n        return True\n    return helper(root)"
  }
,
  {
    "title": "Find the Longest Common Prefix",
    "question": "Write a function to find the longest common prefix string amongst an array of strings.",
    "solution": "Python",
    "answer": "def longest_common_prefix(strs: list) -> str:\n    # If the list is empty, return an empty string\n    if not strs:\n        return ''\n    # Sort the list and compare the first and last strings\n    strs.sort()\n    first = strs[0]\n    last = strs[-1]\n    i = 0\n    while i < len(first) and i < len(last) and first[i] == last[i]:\n        i += 1\n    return first[:i]"
  },
  {
    "title": "Find the Majority Element",
    "question": "Write a function to find the majority element in an array, which appears more than n/2 times.",
    "solution": "Python",
    "answer": "def majority_element(nums: list) -> int:\n    # Initialize variables to store the candidate and count\n    candidate, count = nums[0], 1\n    # Iterate through the array\n    for num in nums[1:]:\n        # Update the count\n        count += 1 if num == candidate else -1\n        # Update the candidate if count becomes zero\n        if count == 0:\n            candidate, count = num, 1\n    return candidate"
  },
  {
    "title": "Find Peak Element",
    "question": "Write a function to find a peak element in an array. An element is a peak if it is greater than its neighbors.",
    "solution": "Python",
    "answer": "def find_peak_element(nums: list) -> int:\n    # Initialize variables to store the left and right boundaries\n    left, right = 0, len(nums) - 1\n    # Binary search for the peak element\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < nums[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
  },
  {
    "title": "Search in Rotated Sorted Array",
    "question": "Write a function to search for a target element in a rotated sorted array.",
    "solution": "Python",
    "answer": "def search(nums: list, target: int) -> int:\n    # Initialize variables to store the left and right boundaries\n    left, right = 0, len(nums) - 1\n    # Binary search for the target element\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1"
  },
  {
    "title": "Implement strStr()",
    "question": "Write a function to implement the strStr() function, which locates a substring within a string.",
    "solution": "Python",
    "answer": "def str_str(haystack: str, needle: str) -> int:\n    # Special cases\n    if not needle:\n        return 0\n    if not haystack:\n        return -1\n    # Iterate through the haystack\n    for i in range(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1"
  }
,
  {
    "title": "Move Zeroes",
    "question": "Write a function to move all zeroes in an array to the end without changing the order of non-zero elements.",
    "solution": "Python",
    "answer": "def move_zeroes(nums: list) -> None:\n    # Initialize a pointer for non-zero elements\n    pos = 0\n    # Iterate through the array\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            # Swap the current element with the first zero\n            nums[i], nums[pos] = nums[pos], nums[i]\n            pos += 1"
  },
  {
    "title": "Contains Duplicate",
    "question": "Write a function to check if a given array contains any duplicates.",
    "solution": "Python",
    "answer": "def contains_duplicate(nums: list) -> bool:\n    # Use a set to store unique elements\n    unique_nums = set()\n    # Iterate through the array\n    for num in nums:\n        if num in unique_nums:\n            return True\n        unique_nums.add(num)\n    return False"
  },
  {
    "title": "Single Number",
    "question": "Write a function to find the element that appears only once in an array where every other element appears twice.",
    "solution": "Python",
    "answer": "def single_number(nums: list) -> int:\n    # Initialize a variable to store the single number\n    single = 0\n    # Use XOR to find the single number\n    for num in nums:\n        single ^= num\n    return single"
  },
  {
    "title": "Intersection of Two Arrays II",
    "question": "Write a function to find the intersection of two arrays, considering duplicates.",
    "solution": "Python",
    "answer": "from collections import Counter\ndef intersect(nums1: list, nums2: list) -> list:\n    # Count the occurrences of each element in both arrays\n    count1, count2 = Counter(nums1), Counter(nums2)\n    # Find the intersection\n    intersection = []\n    for num, count in count1.items():\n        if num in count2:\n            intersection.extend([num] * min(count, count2[num]))\n    return intersection"
  },
  {
    "title": "Plus One",
    "question": "Write a function to add one to a number represented as an array of digits.",
    "solution": "Python",
    "answer": "def plus_one(digits: list) -> list:\n    # Initialize variables to store the carry and the index\n    carry, i = 1, len(digits) - 1\n    # Add one to the number\n    while carry and i >= 0:\n        digits[i] += carry\n        carry, digits[i] = divmod(digits[i], 10)\n        i -= 1\n    # Add the carry to the beginning if needed\n    if carry:\n        digits.insert(0, carry)\n    return digits"
  }
,
  {
    "title": "Reverse Integer",
    "question": "Write a function to reverse an integer.",
    "solution": "Python",
    "answer": "def reverse_integer(x: int) -> int:\n    # Initialize a variable to store the reversed integer\n    rev = 0\n    # Handle the sign\n    sign = 1 if x > 0 else -1\n    x = abs(x)\n    # Reverse the integer\n    while x:\n        x, remainder = divmod(x, 10)\n        rev = rev * 10 + remainder\n    # Check for overflow\n    if rev > 2**31 - 1:\n        return 0\n    return sign * rev"
  },
  {
    "title": "Palindrome Number",
    "question": "Write a function to check if an integer is a palindrome.",
    "solution": "Python",
    "answer": "def is_palindrome_number(x: int) -> bool:\n    # Handle negative numbers and multiples of 10\n    if x < 0 or (x % 10 == 0 and x != 0):\n        return False\n    # Reverse the second half of the integer\n    rev = 0\n    while x > rev:\n        x, remainder = divmod(x, 10)\n        rev = rev * 10 + remainder\n    # Check for palindrome\n    return x == rev or x == rev // 10"
  },
  {
    "title": "Roman to Integer",
    "question": "Write a function to convert a Roman numeral to an integer.",
    "solution": "Python",
    "answer": "def roman_to_int(s: str) -> int:\n    # Define the values of Roman numerals\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    # Initialize a variable to store the integer value\n    value = 0\n    # Convert the Roman numeral to an integer\n    for i in range(len(s)):\n        if i > 0 and roman_values[s[i]] > roman_values[s[i - 1]]:\n            value += roman_values[s[i]] - 2 * roman_values[s[i - 1]]\n        else:\n            value += roman_values[s[i]]\n    return value"
  },
  {
    "title": "Longest Common Subsequence",
    "question": "Write a function to find the length of the longest common subsequence of two strings.",
    "solution": "Python",
    "answer": "def longest_common_subsequence(text1: str, text2: str) -> int:\n    # Initialize a 2D DP array\n    dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]\n    # Compute the length of the LCS\n    for i in range(1, len(text1) + 1):\n        for j in range(1, len(text2) + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]"
  },
  {
    "title": "Implement strStr()",
    "question": "Write a function to implement the strStr() function, which locates a substring within a string.",
    "solution": "Python",
    "answer": "def str_str(haystack: str, needle: str) -> int:\n    # Special cases\n    if not needle:\n        return 0\n    if not haystack:\n        return -1\n    # Iterate through the haystack\n    for i in range(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1"
  }
,
  {
    "title": "Two Sum",
    "question": "Write a function to find two numbers in an array that add up to a specific target.",
    "solution": "Python",
    "answer": "def two_sum(nums: list, target: int) -> list:\n    # Initialize a dictionary to store the indices of elements\n    indices = {}\n    # Iterate through the array\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in indices:\n            return [indices[complement], i]\n        indices[num] = i"
  },
  {
    "title": "Add Two Numbers",
    "question": "Write a function to add two numbers represented by linked lists.",
    "solution": "Python",
    "answer": "def add_two_numbers(l1: ListNode, l2: ListNode) -> ListNode:\n    # Initialize variables to store the carry and the dummy head of the result list\n    carry, dummy_head = 0, ListNode(0)\n    current = dummy_head\n    # Add the numbers\n    while l1 or l2 or carry:\n        total = carry\n        if l1:\n            total += l1.val\n            l1 = l1.next\n        if l2:\n            total += l2.val\n            l2 = l2.next\n        carry, total = divmod(total, 10)\n        current.next = ListNode(total)\n        current = current.next\n    return dummy_head.next"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "question": "Write a function to find the length of the longest substring without repeating characters.",
    "solution": "Python",
    "answer": "def length_of_longest_substring(s: str) -> int:\n    # Initialize variables to store the start index and the character indices\n    start, char_indices = 0, {}\n    max_length = 0\n    # Iterate through the string\n    for i, char in enumerate(s):\n        if char in char_indices and char_indices[char] >= start:\n            start = char_indices[char] + 1\n        char_indices[char] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "question": "Write a function to find the median of two sorted arrays.",
    "solution": "Python",
    "answer": "def find_median_sorted_arrays(nums1: list, nums2: list) -> float:\n    # Make sure nums1 is the smaller array\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    # Binary search for the correct partition\n    low, high = 0, len(nums1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = (len(nums1) + len(nums2) + 1) // 2 - partition1\n        max_left1 = float('-inf') if partition1 == 0 else nums1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len(nums1) else nums1[partition1]\n        max_left2 = float('-inf') if partition2 == 0 else nums2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len(nums2) else nums2[partition2]\n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            if (len(nums1) + len(nums2)) % 2 == 0:\n                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2\n            else:\n                return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1"
  },
  {
    "title": "Container With Most Water",
    "question": "Write a function to find two lines that together with the x-axis form a container that can hold the most water.",
    "solution": "Python",
    "answer": "def max_area(height: list) -> int:\n    # Initialize variables to store the left and right boundaries and the maximum area\n    left, right, max_area = 0, len(height) - 1, 0\n    # Find the container with the most water\n    while left < right:\n        min_height = min(height[left], height[right])\n        max_area = max(max_area, min_height * (right - left))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area"
  }
]






